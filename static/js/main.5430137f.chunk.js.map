{"version":3,"sources":["Player.js","Monster.js","Type.js","App.js","serviceWorker.js","index.js"],"names":["Player","react_default","a","createElement","className","style","Component","Monster","props","_this","Object","classCallCheck","this","text","possibleConstructorReturn","getPrototypeOf","call","pos","Math","floor","random","monsterStyle","left","top","concat","directionX","parseFloat","slice","directionY","len","sqrt","speedX","speedY","moveInterval","state","_this2","gameRunning","setInterval","move","checkGameOver","newMonsterStyle","objectSpread","setState","Type","handleChange","event","value","target","handleSubmit","preventDefault","checkWordTyped","onSubmit","type","autoFocus","onChange","display","App","word","gameover","_this$state","words","monstersKilled","index","indexOf","clearInterval","vocabulary","monsterSpeedGeneration","fetch","then","results","json","data","i","length","hasOwnProperty","push","_this3","generateMonster","_this4","_this$state2","src_Type","src_Player","map","wordIndex","src_Monster","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5430137f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Player extends Component {\n    render() {\n        return (\n            <div className=\"Player\"                    \n            style={{\n            }}>\n            </div>\n        );\n    }\n}\n\nexport default Player;","import React, { Component } from 'react';\n\nclass Monster extends Component {\n    constructor(props) {\n        super(props);\n        const { text } = this.props;\n        this.text = text;\n        // Monster is coming from :\n        const pos = Math.floor(Math.random() * 100);\n        const comingFromSide = Math.floor(Math.random() * 4);\n        switch (comingFromSide) {\n            // left\n            case 1:\n                this.monsterStyle = {\n                    left: \"-10%\",\n                    top: `${pos}%`,\n                };\n                break;\n            // right\n            case 2:\n                this.monsterStyle = {\n                    left: \"110%\",\n                    top: `${pos}%`,\n                };\n                break;\n            // top\n            case 3:\n                this.monsterStyle = {\n                    top: \"-10%\",\n                    left: `${pos}%`,\n                };\n                break;\n            // bottom\n            default:\n                this.monsterStyle = {\n                    top: \"110%\",\n                    left: `${pos}%`,\n                };\n                break;\n        }\n        // Calculate speedX and speedY (distance per step)\n        let posX = parseFloat(this.monsterStyle.left.slice(0, -1));\n        let posY = parseFloat(this.monsterStyle.top.slice(0, -1));\n        let directionX = 50 - posX;\n        let directionY = 50 - posY;\n        let len = Math.sqrt(directionX * directionX + directionY * directionY);\n        directionX /= len;\n        directionY /= len;\n        // Adjust speed here (distance per step)\n        this.speedX = directionX * 0.1\n        this.speedY = directionY * 0.1\n        // Moving speed (setInterval): one step every this.moveInterval ms\n        this.moveInterval = 100;\n        this.state = {\n            monsterStyle: this.monsterStyle,\n        }\n    }\n\n    componentWillMount() {\n        this.gameRunning = setInterval(() => {\n            this.move();\n        }, this.moveInterval);\n    }\n\n    move() {\n        const { checkGameOver } = this.props;\n        let { monsterStyle } = this.state;\n        let newMonsterStyle = { ...monsterStyle };\n        let top = parseFloat(newMonsterStyle.top.slice(0, -1));\n        let left = parseFloat(newMonsterStyle.left.slice(0, -1));\n        if ((left >= 48 && left <= 52) && (top >= 48 && top <= 52)) {\n            checkGameOver(true);\n        } else {\n            top += this.speedY;\n            left += this.speedX;\n        }\n        newMonsterStyle = {\n            top: `${top}%`,\n            left: `${left}%`,\n        };\n        this.setState({ monsterStyle: newMonsterStyle });\n    }\n\n\n    render() {\n        const { monsterStyle } = this.state;\n        return (\n            <div\n                className=\"Monster\"\n                style={monsterStyle}\n            >\n                <div className=\"MonsterImg\" />\n                <p className=\"MonsterName\">\n                    {this.text}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Monster;","import React, { Component } from 'react';\n\nclass Type extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\"\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const { checkWordTyped } = this.props;\n        checkWordTyped(this.state.value);\n        this.setState({ value: \"\" })\n    }\n\n    render() {\n        return (\n            <div className=\"Type\">\n                <form onSubmit={this.handleSubmit}>\n                    <input type=\"text\" autoFocus={true} value={this.state.value} onChange={this.handleChange} />\n                    <input type=\"submit\" value=\"Submit\" style={{display:\"none\"}} />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Type;","import React, { Component } from 'react';\nimport Player from './Player';\nimport Monster from './Monster';\nimport Type from './Type';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // document.addEventListener(\"keydown\", this.checkChar, false)\n    this.vocabulary = [];\n    // Difficult setting: monster generated every this.monsterSpeedGeneration ms\n    this.monsterSpeedGeneration = 1000;\n    this.state = {\n      words: [],\n      monstersKilled: 0,\n      gameover: false,\n    }\n  }\n\n  componentWillMount() {\n    fetch('https://api.datamuse.com/words?ml=program')\n      .then(results => results.json())\n      .then((data) => {\n        for (let i = 0; i < data.length; i++) {\n          if (data.hasOwnProperty(i)) {\n            this.vocabulary.push(data[i].word)\n          }\n        }\n      });\n  }\n\n  componentDidMount() {\n    this.gameRunning = setInterval(\n      () => this.generateMonster()\n      , this.monsterSpeedGeneration);\n  }\n\n  generateMonster() {\n    const { words } = this.state;\n    words.push(this.vocabulary[Math.floor(Math.random() * this.vocabulary.length)]);\n    this.setState({ words });\n  }\n\n  checkWordTyped = (word) => {\n    const { gameover } = this.state;\n    if (gameover === false) {\n      let { words, monstersKilled } = this.state;\n      let index = words.indexOf(word);\n      if (index !== -1) {\n        words[index] = \"\";\n        monstersKilled++;\n      }\n      this.setState({ words, monstersKilled });\n    }\n  }\n\n  checkGameOver = (value) => {\n    if (value) {\n      this.setState({ gameover: true });\n      clearInterval(this.gameRunning);\n    };\n  }\n\n  render() {\n    const { words, monstersKilled, gameover } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"GameArea\">\n          <p className=\"Score\">Zombies killed : {monstersKilled}</p>\n          <Type checkWordTyped={this.checkWordTyped} />\n          <Player />\n          {\n            words.map((word, wordIndex) => (\n              words[wordIndex] !== \"\" ?\n                <Monster text={word} key={`monsterId-${wordIndex}`} checkGameOver={this.checkGameOver} />\n                : null\n            ))\n          }\n          {\n            gameover ?\n              <p className=\"GameOver\">\n                GAME OVER<br></br>\n                Score: {monstersKilled}\n              </p>\n              : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}